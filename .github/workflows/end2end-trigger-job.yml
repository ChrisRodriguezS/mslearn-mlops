name: Trigger end to end AzureML training job

on:
  workflow_dispatch:

jobs:
  # train-dev:
  #   runs-on: ubuntu-latest
  #   environment: dev
  #   steps:
  #   - name: Check out repo
  #     uses: actions/checkout@main
  #   - name: Install az ml extension
  #     run: az extension add -n ml -y
  #   - name: Azure login
  #     uses: azure/login@v1
  #     with:
  #       creds: ${{secrets.AZURE_CREDENTIALS}}
  #   - name: Run Dev Experiment Job
  #     run: |
  #       az ml job create --file src/job_train.yml \
  #         --workspace-name aml-tccc-ms-training-dts-dsml-poc \
  #         --resource-group rg-tccc-ms-training-for-dts-dsml-poc \
  #         --set compute=Compute-Cluster \
  #         --stream

  # train-prod:
  #   runs-on: ubuntu-latest
  #   environment: prod  # This is your production environment with approvals
  #   needs: train-dev  # This ensures prod runs only after dev succeeds
  #   steps:
  #   - name: Check out repo
  #     uses: actions/checkout@main
  #   - name: Install az ml extension
  #     run: az extension add -n ml -y
  #   - name: Azure login
  #     uses: azure/login@v1
  #     with:
  #       creds: ${{secrets.AZURE_CREDENTIALS}}
  #   - name: Run Prod Experiment Job
  #     run: |
  #       JOB_OUTPUT=$(az ml job create --file src/job_prod.yml \
  #         --workspace-name aml-tccc-ms-training-dts-dsml-poc \
  #         --resource-group rg-tccc-ms-training-for-dts-dsml-poc \
  #         --set compute=Compute-Cluster \
  #         --query name -o tsv)
  #       echo "::set-output name=job_id::$JOB_OUTPUT"

  deploy-model:
    runs-on: ubuntu-latest
    environment: prod
    # needs: train-prod
    steps:
    - name: Check out repo
      uses: actions/checkout@main
    
    - name: Install az ml extension
      run: az extension add -n ml -y
    
    - name: Azure login
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
    
    - name: Get latest run info
      id: get_run
      run: |
        # Get the latest completed run from the production experiment
        RUN_ID=$(az ml job list --workspace-name aml-tccc-ms-training-dts-dsml-poc --resource-group rg-tccc-ms-training-for-dts-dsml-poc --query "[?experiment_name=='training-diabetes-prod'].name | [0]" -o tsv)
        echo "::set-output name=run_id::$RUN_ID"
    
    - name: Register Model
      id: register_model
      run: |
        MODEL_NAME="diabetes-model-prod-christian"
        MODEL_VERSION=$(az ml model create --name $MODEL_NAME \
          --path "azureml://jobs/${{ steps.get_run.outputs.run_id }}/outputs/artifacts/model" \
          --type mlflow_model \
          --resource-group rg-tccc-ms-training-for-dts-dsml-poc \
          --workspace-name aml-tccc-ms-training-dts-dsml-poc \
          --query version -o tsv)
        
        # Validate model was registered
        if [ -z "$MODEL_VERSION" ]; then
          echo "Error: Model registration failed or version not returned"
          exit 1
        fi
        
        echo "Model registered successfully with version: $MODEL_VERSION"
        echo "model_name=$MODEL_NAME" >> $GITHUB_OUTPUT
        echo "model_version=$MODEL_VERSION" >> $GITHUB_OUTPUT
        
    - name: Wait for Model Registration
      run: |
        echo "Waiting for model registration to complete..."
        sleep 30  # Wait for 30 seconds
        
        # Optional: Poll until model is available
        MODEL_NAME="${{ steps.register_model.outputs.model_name }}"
        MODEL_VERSION="${{ steps.register_model.outputs.model_version }}"
        
        MAX_ATTEMPTS=10
        ATTEMPT=1
        
        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          echo "Checking if model exists (Attempt $ATTEMPT of $MAX_ATTEMPTS)..."
          
          MODEL_EXISTS=$(az ml model show --name $MODEL_NAME --version $MODEL_VERSION \
            --resource-group rg-tccc-ms-training-for-dts-dsml-poc \
            --workspace-name aml-tccc-ms-training-dts-dsml-poc \
            --query version -o tsv 2>/dev/null || echo "")
          
          if [ ! -z "$MODEL_EXISTS" ]; then
            echo "Success! Model $MODEL_NAME@$MODEL_VERSION is now available"
            break
          fi
          
          echo "Model not available yet, waiting..."
          sleep 15  # Wait 15 seconds between checks
          ATTEMPT=$((ATTEMPT+1))
        done
        
        if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
          echo "Timed out waiting for model to become available"
          exit 1
        fi

    - name: Create Online Endpoint
      id: create_endpoint
      run: |
        # Add uniqueness with timestamp
        TIMESTAMP=$(date +%Y%m%d%H%M)
        ENDPOINT_NAME="diabetes-endpoint-${TIMESTAMP}"
        
        # Debug output
        echo "Checking for endpoint: $ENDPOINT_NAME"
        
        # Check if endpoint exists
        ENDPOINT_EXISTS=$(az ml online-endpoint list --workspace-name aml-tccc-ms-training-dts-dsml-poc --resource-group rg-tccc-ms-training-for-dts-dsml-poc --query "[?name=='$ENDPOINT_NAME'].name" -o tsv)
        echo "Endpoint exists check result: '$ENDPOINT_EXISTS'"
        
        if [ -z "$ENDPOINT_EXISTS" ]; then
          echo "Creating new endpoint: $ENDPOINT_NAME"
          # Create endpoint YAML content without heredoc
          echo '$schema: https://azuremlschemas.azureedge.net/latest/managedOnlineEndpoint.schema.json' > endpoint.yml
          echo "name: $ENDPOINT_NAME" >> endpoint.yml
          echo 'auth_mode: key' >> endpoint.yml
          
          # Create the endpoint
          az ml online-endpoint create --file endpoint.yml \
            --resource-group rg-tccc-ms-training-for-dts-dsml-poc \
            --workspace-name aml-tccc-ms-training-dts-dsml-poc
        else
          echo "Endpoint $ENDPOINT_NAME already exists, skipping creation"
        fi
        
        echo "endpoint_name=$ENDPOINT_NAME" >> $GITHUB_OUTPUT
        
    - name: Deploy Model to Endpoint
      run: |
        # Create deployment YAML file
        DEPLOYMENT_NAME="blue"
        
        # Clean start with empty file
        > deployment.yml
        
        # Add content line by line with proper formatting
        echo '$schema: https://azuremlschemas.azureedge.net/latest/managedOnlineDeployment.schema.json' >> deployment.yml
        echo "name: $DEPLOYMENT_NAME" >> deployment.yml
        echo "endpoint_name: ${{ steps.create_endpoint.outputs.endpoint_name }}" >> deployment.yml
        echo "model: azureml:${{ steps.register_model.outputs.model_name }}@${{ steps.register_model.outputs.model_version }}" >> deployment.yml
        echo "instance_type: Standard_DS3_v2" >> deployment.yml
        echo "instance_count: 1" >> deployment.yml
        
        # Debug: Display the contents of the YAML file
        echo "Contents of deployment.yml:"
        cat deployment.yml
        
        # Check if deployment exists
        DEPLOYMENT_EXISTS=$(az ml online-deployment list --endpoint-name ${{ steps.create_endpoint.outputs.endpoint_name }} --workspace-name aml-tccc-ms-training-dts-dsml-poc --resource-group rg-tccc-ms-training-for-dts-dsml-poc --query "[?name=='$DEPLOYMENT_NAME'].name" -o tsv)
        
        if [ -z "$DEPLOYMENT_EXISTS" ]; then
          # Create the deployment
          az ml online-deployment create --file deployment.yml \
            --resource-group rg-tccc-ms-training-for-dts-dsml-poc \
            --workspace-name aml-tccc-ms-training-dts-dsml-poc
        else
          # Update the deployment
          az ml online-deployment update --file deployment.yml \
            --resource-group rg-tccc-ms-training-for-dts-dsml-poc \
            --workspace-name aml-tccc-ms-training-dts-dsml-poc
        fi
        
        # Update traffic to point to the new deployment
        az ml online-endpoint update --name ${{ steps.create_endpoint.outputs.endpoint_name }} \
          --traffic "$DEPLOYMENT_NAME=100" \
          --resource-group rg-tccc-ms-training-for-dts-dsml-poc \
          --workspace-name aml-tccc-ms-training-dts-dsml-poc